name: Deploy to VPS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/minimalist-backend

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to VPS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Debug key format
        echo "SSH key file info:"
        file ~/.ssh/deploy_key
        head -1 ~/.ssh/deploy_key
        tail -1 ~/.ssh/deploy_key
        
        # Test connectivity first
        echo "Testing connectivity to ${{ secrets.VPS_HOST }}:${{ secrets.VPS_SSH_PORT }}"
        nc -zv ${{ secrets.VPS_HOST }} ${{ secrets.VPS_SSH_PORT }} || echo "Port check failed"
        
        # Add host key (try with custom port)
        ssh-keyscan -H -p ${{ secrets.VPS_SSH_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts || echo "Host key scan failed, proceeding anyway"

    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy necessary files
        cp Dockerfile deployment/
        cp docker-compose.prod.yml deployment/
        cp Cargo.toml deployment/
        cp Cargo.lock deployment/
        cp -r src deployment/
        cp -r migrations deployment/ 2>/dev/null || true
        cp example.*.yaml deployment/ 2>/dev/null || true
        cp .config.yaml deployment/ 2>/dev/null || true
        cp Makefile deployment/ 2>/dev/null || true
        
        # Create archive
        tar -czf deployment.tar.gz -C deployment .
        
    - name: Deploy to VPS
      run: |
        # Upload deployment package
        scp -i ~/.ssh/deploy_key -P ${{ secrets.VPS_SSH_PORT }} -o StrictHostKeyChecking=no deployment.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
        
        # Execute deployment script on VPS
        ssh -i ~/.ssh/deploy_key -p ${{ secrets.VPS_SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e
          
          # Configuration
          APP_DIR="${{ secrets.VPS_BACKEND_DIR }}"
          BACKUP_DIR="${{ secrets.VPS_BACKUP_DIR }}"
          
          # Create directories
          mkdir -p "$APP_DIR"
          mkdir -p "$BACKUP_DIR"
          
          # Backup current deployment
          if [ -d "$APP_DIR" ] && [ "$(ls -A $APP_DIR)" ]; then
            echo "Creating backup..."
            cp -r "$APP_DIR" "$BACKUP_DIR/backend-backup-$(date +%Y%m%d-%H%M%S)" || true
          fi
          
          # Extract new deployment
          cd "$APP_DIR"
          tar -xzf /tmp/deployment.tar.gz
          
          # Create external network if not exists
          docker network create portfolio-network || true
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Stop and remove old containers
          docker compose -f docker-compose.prod.yml down || true
          
          # Pull latest images
          docker compose -f docker-compose.prod.yml pull api
          
          # Start new containers
          docker compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          sleep 30
          
          # Verify deployment
          docker compose -f docker-compose.prod.yml ps api | grep -q "healthy" || exit 1
          
          # Clean up old images
          docker image prune -f
          
          # Cleanup
          rm -f /tmp/deployment.tar.gz
          
          # Show status
          docker compose -f docker-compose.prod.yml ps
          
          echo "Backend deployment completed successfully!"
        EOF

    - name: Cleanup SSH
      if: always()
      run: |
        rm -f ~/.ssh/deploy_key

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build, build-and-push, deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Backend deployment successful!"
        # Add webhook notification here if needed
        # curl -X POST ${{ secrets.DISCORD_WEBHOOK }} -d '{"content":"✅ Backend deployed successfully!"}'
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure' || needs.build.result == 'failure' || needs.build-and-push.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add webhook notification here if needed
        # curl -X POST ${{ secrets.DISCORD_WEBHOOK }} -d '{"content":"❌ Backend deployment failed!"}' 